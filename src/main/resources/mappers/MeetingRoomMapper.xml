<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.xidian.meetingroom.mapper.MeetingRoomMapper">
  <resultMap id="BaseResultMap" type="cn.xidian.meetingroom.model.MeetingRoom">
    <id column="meeting_room_id" jdbcType="INTEGER" property="meetingRoomId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="room_number" jdbcType="VARCHAR" property="roomNumber" />
    <result column="capacity" jdbcType="INTEGER" property="capacity" />
    <result column="area" jdbcType="DECIMAL" property="area" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.xidian.meetingroom.model.MeetingRoomWithBLOBs">
    <result column="photo_url" jdbcType="LONGVARCHAR" property="photoUrl" />
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    meeting_room_id, name, room_number, capacity, area, created_time, updated_time
  </sql>
  <sql id="Blob_Column_List">
    photo_url, description
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.xidian.meetingroom.model.MeetingRoomExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from MeetingRoom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.xidian.meetingroom.model.MeetingRoomExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from MeetingRoom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from MeetingRoom
    where meeting_room_id = #{meetingRoomId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from MeetingRoom
    where meeting_room_id = #{meetingRoomId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.xidian.meetingroom.model.MeetingRoomExample">
    delete from MeetingRoom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.xidian.meetingroom.model.MeetingRoomWithBLOBs">
    <selectKey keyProperty="meetingRoomId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into MeetingRoom (name, room_number, capacity, 
      area, created_time, updated_time, 
      photo_url, description)
    values (#{name,jdbcType=VARCHAR}, #{roomNumber,jdbcType=VARCHAR}, #{capacity,jdbcType=INTEGER}, 
      #{area,jdbcType=DECIMAL}, #{createdTime,jdbcType=TIMESTAMP}, #{updatedTime,jdbcType=TIMESTAMP}, 
      #{photoUrl,jdbcType=LONGVARCHAR}, #{description,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.xidian.meetingroom.model.MeetingRoomWithBLOBs">
    <selectKey keyProperty="meetingRoomId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into MeetingRoom
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="roomNumber != null">
        room_number,
      </if>
      <if test="capacity != null">
        capacity,
      </if>
      <if test="area != null">
        area,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updatedTime != null">
        updated_time,
      </if>
      <if test="photoUrl != null">
        photo_url,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="roomNumber != null">
        #{roomNumber,jdbcType=VARCHAR},
      </if>
      <if test="capacity != null">
        #{capacity,jdbcType=INTEGER},
      </if>
      <if test="area != null">
        #{area,jdbcType=DECIMAL},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedTime != null">
        #{updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="photoUrl != null">
        #{photoUrl,jdbcType=LONGVARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.xidian.meetingroom.model.MeetingRoomExample" resultType="java.lang.Long">
    select count(*) from MeetingRoom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update MeetingRoom
    <set>
      <if test="row.meetingRoomId != null">
        meeting_room_id = #{row.meetingRoomId,jdbcType=INTEGER},
      </if>
      <if test="row.name != null">
        name = #{row.name,jdbcType=VARCHAR},
      </if>
      <if test="row.roomNumber != null">
        room_number = #{row.roomNumber,jdbcType=VARCHAR},
      </if>
      <if test="row.capacity != null">
        capacity = #{row.capacity,jdbcType=INTEGER},
      </if>
      <if test="row.area != null">
        area = #{row.area,jdbcType=DECIMAL},
      </if>
      <if test="row.createdTime != null">
        created_time = #{row.createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updatedTime != null">
        updated_time = #{row.updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.photoUrl != null">
        photo_url = #{row.photoUrl,jdbcType=LONGVARCHAR},
      </if>
      <if test="row.description != null">
        description = #{row.description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update MeetingRoom
    set meeting_room_id = #{row.meetingRoomId,jdbcType=INTEGER},
      name = #{row.name,jdbcType=VARCHAR},
      room_number = #{row.roomNumber,jdbcType=VARCHAR},
      capacity = #{row.capacity,jdbcType=INTEGER},
      area = #{row.area,jdbcType=DECIMAL},
      created_time = #{row.createdTime,jdbcType=TIMESTAMP},
      updated_time = #{row.updatedTime,jdbcType=TIMESTAMP},
      photo_url = #{row.photoUrl,jdbcType=LONGVARCHAR},
      description = #{row.description,jdbcType=LONGVARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update MeetingRoom
    set meeting_room_id = #{row.meetingRoomId,jdbcType=INTEGER},
      name = #{row.name,jdbcType=VARCHAR},
      room_number = #{row.roomNumber,jdbcType=VARCHAR},
      capacity = #{row.capacity,jdbcType=INTEGER},
      area = #{row.area,jdbcType=DECIMAL},
      created_time = #{row.createdTime,jdbcType=TIMESTAMP},
      updated_time = #{row.updatedTime,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.xidian.meetingroom.model.MeetingRoomWithBLOBs">
    update MeetingRoom
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="roomNumber != null">
        room_number = #{roomNumber,jdbcType=VARCHAR},
      </if>
      <if test="capacity != null">
        capacity = #{capacity,jdbcType=INTEGER},
      </if>
      <if test="area != null">
        area = #{area,jdbcType=DECIMAL},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedTime != null">
        updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="photoUrl != null">
        photo_url = #{photoUrl,jdbcType=LONGVARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where meeting_room_id = #{meetingRoomId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.xidian.meetingroom.model.MeetingRoomWithBLOBs">
    update MeetingRoom
    set name = #{name,jdbcType=VARCHAR},
      room_number = #{roomNumber,jdbcType=VARCHAR},
      capacity = #{capacity,jdbcType=INTEGER},
      area = #{area,jdbcType=DECIMAL},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      photo_url = #{photoUrl,jdbcType=LONGVARCHAR},
      description = #{description,jdbcType=LONGVARCHAR}
    where meeting_room_id = #{meetingRoomId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.xidian.meetingroom.model.MeetingRoom">
    update MeetingRoom
    set name = #{name,jdbcType=VARCHAR},
      room_number = #{roomNumber,jdbcType=VARCHAR},
      capacity = #{capacity,jdbcType=INTEGER},
      area = #{area,jdbcType=DECIMAL},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP}
    where meeting_room_id = #{meetingRoomId,jdbcType=INTEGER}
  </update>
    <resultMap id="MeetingRoomResultMap" type="MeetingRoom">
        <id column="meeting_room_id" property="meetingRoomId" />
        <result column="name" property="name" />
        <result column="room_number" property="roomNumber" />
        <result column="capacity" property="capacity" />
        <result column="area" property="area" />
        <result column="photo_url" property="photoUrl" />
        <result column="description" property="description" />
        <result column="created_time" property="createdTime" />
        <result column="updated_time" property="updatedTime" />
    </resultMap>

    <select id="selectMeetingRoomById" resultMap="MeetingRoomResultMap">
        SELECT * FROM MeetingRoom WHERE meeting_room_id = #{meetingRoomId}
    </select>

    <select id="selectAllMeetingRooms" resultMap="MeetingRoomResultMap">
        SELECT * FROM MeetingRoom ORDER BY meeting_room_id
    </select>

    <insert id="insertMeetingRoom" parameterType="MeetingRoom">
        INSERT INTO MeetingRoom (
            name, 
            room_number, 
            capacity, 
            area, 
            photo_url, 
            description,
            created_time,
            updated_time
        ) VALUES (
            #{name}, 
            #{roomNumber}, 
            #{capacity}, 
            #{area}, 
            #{photoUrl}, 
            #{description},
            #{createdTime},
            #{updatedTime}
        )
    </insert>

    <update id="updateMeetingRoom" parameterType="MeetingRoom">
        UPDATE MeetingRoom 
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="roomNumber != null">room_number = #{roomNumber},</if>
            <if test="capacity != null">capacity = #{capacity},</if>
            <if test="area != null">area = #{area},</if>
            <if test="photoUrl != null">photo_url = #{photoUrl},</if>
            <if test="description != null">description = #{description},</if>
            updated_time = #{updatedTime}
        </set>
        WHERE meeting_room_id = #{meetingRoomId}
    </update>

    <delete id="deleteMeetingRoom">
        DELETE FROM MeetingRoom WHERE meeting_room_id = #{meetingRoomId}
    </delete>
</mapper>